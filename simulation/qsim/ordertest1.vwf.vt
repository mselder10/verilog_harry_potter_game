// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2018 17:29:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          orderTrace
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module orderTrace_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [24:0] inTrace;
// wires                                               
wire [124:0] order;

// assign statements (if any)                          
orderTrace i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.inTrace(inTrace),
	.order(order)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b0;
end 
// inTrace[ 24 ]
initial
begin
	inTrace[24] = 1'b0;
end 
// inTrace[ 23 ]
initial
begin
	inTrace[23] = 1'b0;
end 
// inTrace[ 22 ]
initial
begin
	inTrace[22] = 1'b0;
end 
// inTrace[ 21 ]
initial
begin
	inTrace[21] = 1'b0;
end 
// inTrace[ 20 ]
initial
begin
	inTrace[20] = 1'b0;
end 
// inTrace[ 19 ]
initial
begin
	inTrace[19] = 1'b0;
end 
// inTrace[ 18 ]
initial
begin
	inTrace[18] = 1'b0;
end 
// inTrace[ 17 ]
initial
begin
	inTrace[17] = 1'b0;
end 
// inTrace[ 16 ]
initial
begin
	inTrace[16] = 1'b0;
end 
// inTrace[ 15 ]
initial
begin
	inTrace[15] = 1'b0;
end 
// inTrace[ 14 ]
initial
begin
	inTrace[14] = 1'b0;
end 
// inTrace[ 13 ]
initial
begin
	inTrace[13] = 1'b0;
end 
// inTrace[ 12 ]
initial
begin
	inTrace[12] = 1'b0;
end 
// inTrace[ 11 ]
initial
begin
	inTrace[11] = 1'b0;
end 
// inTrace[ 10 ]
initial
begin
	inTrace[10] = 1'b0;
end 
// inTrace[ 9 ]
initial
begin
	inTrace[9] = 1'b1;
end 
// inTrace[ 8 ]
initial
begin
	inTrace[8] = 1'b1;
end 
// inTrace[ 7 ]
initial
begin
	inTrace[7] = 1'b0;
end 
// inTrace[ 6 ]
initial
begin
	inTrace[6] = 1'b0;
end 
// inTrace[ 5 ]
initial
begin
	inTrace[5] = 1'b1;
end 
// inTrace[ 4 ]
initial
begin
	inTrace[4] = 1'b0;
end 
// inTrace[ 3 ]
initial
begin
	inTrace[3] = 1'b0;
end 
// inTrace[ 2 ]
initial
begin
	inTrace[2] = 1'b1;
end 
// inTrace[ 1 ]
initial
begin
	inTrace[1] = 1'b1;
end 
// inTrace[ 0 ]
initial
begin
	inTrace[0] = 1'b1;
end 
endmodule

