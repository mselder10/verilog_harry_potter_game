// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2018 23:45:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          checkLeft
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module checkLeft_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [4:0] col;
reg [4:0] current;
reg [4:0] index;
reg [124:0] next;
reg [124:0] order;
reg [4:0] row;
reg [24:0] trace;
// wires                                               
wire [4:0] current_out;
wire dataRDY;
wire [4:0] index_out;
wire [124:0] next_out;
wire [124:0] order_out;

// assign statements (if any)                          
checkLeft i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.col(col),
	.current(current),
	.current_out(current_out),
	.dataRDY(dataRDY),
	.index(index),
	.index_out(index_out),
	.next(next),
	.next_out(next_out),
	.order(order),
	.order_out(order_out),
	.row(row),
	.trace(trace)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// col[ 4 ]
initial
begin
	col[4] = 1'b0;
end 
// col[ 3 ]
initial
begin
	col[3] = 1'b0;
end 
// col[ 2 ]
initial
begin
	col[2] = 1'b0;
end 
// col[ 1 ]
initial
begin
	col[1] = 1'b1;
end 
// col[ 0 ]
initial
begin
	col[0] = 1'b1;
end 
// row[ 4 ]
initial
begin
	row[4] = 1'b0;
end 
// row[ 3 ]
initial
begin
	row[3] = 1'b0;
end 
// row[ 2 ]
initial
begin
	row[2] = 1'b0;
end 
// row[ 1 ]
initial
begin
	row[1] = 1'b1;
end 
// row[ 0 ]
initial
begin
	row[0] = 1'b0;
end 
// current[ 4 ]
initial
begin
	current[4] = 1'b0;
end 
// current[ 3 ]
initial
begin
	current[3] = 1'b0;
end 
// current[ 2 ]
initial
begin
	current[2] = 1'b1;
end 
// current[ 1 ]
initial
begin
	current[1] = 1'b1;
end 
// current[ 0 ]
initial
begin
	current[0] = 1'b0;
end 
// index[ 4 ]
initial
begin
	index[4] = 1'b0;
end 
// index[ 3 ]
initial
begin
	index[3] = 1'b0;
end 
// index[ 2 ]
initial
begin
	index[2] = 1'b1;
end 
// index[ 1 ]
initial
begin
	index[1] = 1'b0;
end 
// index[ 0 ]
initial
begin
	index[0] = 1'b1;
end 
// next[ 124 ]
initial
begin
	next[124] = 1'b0;
end 
// next[ 123 ]
initial
begin
	next[123] = 1'b0;
end 
// next[ 122 ]
initial
begin
	next[122] = 1'b0;
end 
// next[ 121 ]
initial
begin
	next[121] = 1'b0;
end 
// next[ 120 ]
initial
begin
	next[120] = 1'b0;
end 
// next[ 119 ]
initial
begin
	next[119] = 1'b0;
end 
// next[ 118 ]
initial
begin
	next[118] = 1'b0;
end 
// next[ 117 ]
initial
begin
	next[117] = 1'b0;
end 
// next[ 116 ]
initial
begin
	next[116] = 1'b0;
end 
// next[ 115 ]
initial
begin
	next[115] = 1'b0;
end 
// next[ 114 ]
initial
begin
	next[114] = 1'b0;
end 
// next[ 113 ]
initial
begin
	next[113] = 1'b0;
end 
// next[ 112 ]
initial
begin
	next[112] = 1'b0;
end 
// next[ 111 ]
initial
begin
	next[111] = 1'b0;
end 
// next[ 110 ]
initial
begin
	next[110] = 1'b0;
end 
// next[ 109 ]
initial
begin
	next[109] = 1'b0;
end 
// next[ 108 ]
initial
begin
	next[108] = 1'b0;
end 
// next[ 107 ]
initial
begin
	next[107] = 1'b0;
end 
// next[ 106 ]
initial
begin
	next[106] = 1'b0;
end 
// next[ 105 ]
initial
begin
	next[105] = 1'b0;
end 
// next[ 104 ]
initial
begin
	next[104] = 1'b0;
end 
// next[ 103 ]
initial
begin
	next[103] = 1'b0;
end 
// next[ 102 ]
initial
begin
	next[102] = 1'b0;
end 
// next[ 101 ]
initial
begin
	next[101] = 1'b0;
end 
// next[ 100 ]
initial
begin
	next[100] = 1'b0;
end 
// next[ 99 ]
initial
begin
	next[99] = 1'b0;
end 
// next[ 98 ]
initial
begin
	next[98] = 1'b0;
end 
// next[ 97 ]
initial
begin
	next[97] = 1'b0;
end 
// next[ 96 ]
initial
begin
	next[96] = 1'b0;
end 
// next[ 95 ]
initial
begin
	next[95] = 1'b0;
end 
// next[ 94 ]
initial
begin
	next[94] = 1'b0;
end 
// next[ 93 ]
initial
begin
	next[93] = 1'b0;
end 
// next[ 92 ]
initial
begin
	next[92] = 1'b0;
end 
// next[ 91 ]
initial
begin
	next[91] = 1'b0;
end 
// next[ 90 ]
initial
begin
	next[90] = 1'b0;
end 
// next[ 89 ]
initial
begin
	next[89] = 1'b0;
end 
// next[ 88 ]
initial
begin
	next[88] = 1'b0;
end 
// next[ 87 ]
initial
begin
	next[87] = 1'b0;
end 
// next[ 86 ]
initial
begin
	next[86] = 1'b0;
end 
// next[ 85 ]
initial
begin
	next[85] = 1'b0;
end 
// next[ 84 ]
initial
begin
	next[84] = 1'b0;
end 
// next[ 83 ]
initial
begin
	next[83] = 1'b0;
end 
// next[ 82 ]
initial
begin
	next[82] = 1'b0;
end 
// next[ 81 ]
initial
begin
	next[81] = 1'b0;
end 
// next[ 80 ]
initial
begin
	next[80] = 1'b0;
end 
// next[ 79 ]
initial
begin
	next[79] = 1'b0;
end 
// next[ 78 ]
initial
begin
	next[78] = 1'b0;
end 
// next[ 77 ]
initial
begin
	next[77] = 1'b0;
end 
// next[ 76 ]
initial
begin
	next[76] = 1'b0;
end 
// next[ 75 ]
initial
begin
	next[75] = 1'b0;
end 
// next[ 74 ]
initial
begin
	next[74] = 1'b0;
end 
// next[ 73 ]
initial
begin
	next[73] = 1'b0;
end 
// next[ 72 ]
initial
begin
	next[72] = 1'b0;
end 
// next[ 71 ]
initial
begin
	next[71] = 1'b0;
end 
// next[ 70 ]
initial
begin
	next[70] = 1'b0;
end 
// next[ 69 ]
initial
begin
	next[69] = 1'b0;
end 
// next[ 68 ]
initial
begin
	next[68] = 1'b0;
end 
// next[ 67 ]
initial
begin
	next[67] = 1'b0;
end 
// next[ 66 ]
initial
begin
	next[66] = 1'b0;
end 
// next[ 65 ]
initial
begin
	next[65] = 1'b0;
end 
// next[ 64 ]
initial
begin
	next[64] = 1'b0;
end 
// next[ 63 ]
initial
begin
	next[63] = 1'b0;
end 
// next[ 62 ]
initial
begin
	next[62] = 1'b0;
end 
// next[ 61 ]
initial
begin
	next[61] = 1'b0;
end 
// next[ 60 ]
initial
begin
	next[60] = 1'b0;
end 
// next[ 59 ]
initial
begin
	next[59] = 1'b0;
end 
// next[ 58 ]
initial
begin
	next[58] = 1'b0;
end 
// next[ 57 ]
initial
begin
	next[57] = 1'b0;
end 
// next[ 56 ]
initial
begin
	next[56] = 1'b0;
end 
// next[ 55 ]
initial
begin
	next[55] = 1'b0;
end 
// next[ 54 ]
initial
begin
	next[54] = 1'b0;
end 
// next[ 53 ]
initial
begin
	next[53] = 1'b0;
end 
// next[ 52 ]
initial
begin
	next[52] = 1'b0;
end 
// next[ 51 ]
initial
begin
	next[51] = 1'b0;
end 
// next[ 50 ]
initial
begin
	next[50] = 1'b0;
end 
// next[ 49 ]
initial
begin
	next[49] = 1'b0;
end 
// next[ 48 ]
initial
begin
	next[48] = 1'b0;
end 
// next[ 47 ]
initial
begin
	next[47] = 1'b0;
end 
// next[ 46 ]
initial
begin
	next[46] = 1'b0;
end 
// next[ 45 ]
initial
begin
	next[45] = 1'b0;
end 
// next[ 44 ]
initial
begin
	next[44] = 1'b0;
end 
// next[ 43 ]
initial
begin
	next[43] = 1'b0;
end 
// next[ 42 ]
initial
begin
	next[42] = 1'b0;
end 
// next[ 41 ]
initial
begin
	next[41] = 1'b0;
end 
// next[ 40 ]
initial
begin
	next[40] = 1'b0;
end 
// next[ 39 ]
initial
begin
	next[39] = 1'b0;
end 
// next[ 38 ]
initial
begin
	next[38] = 1'b0;
end 
// next[ 37 ]
initial
begin
	next[37] = 1'b0;
end 
// next[ 36 ]
initial
begin
	next[36] = 1'b0;
end 
// next[ 35 ]
initial
begin
	next[35] = 1'b0;
end 
// next[ 34 ]
initial
begin
	next[34] = 1'b0;
end 
// next[ 33 ]
initial
begin
	next[33] = 1'b0;
end 
// next[ 32 ]
initial
begin
	next[32] = 1'b0;
end 
// next[ 31 ]
initial
begin
	next[31] = 1'b0;
end 
// next[ 30 ]
initial
begin
	next[30] = 1'b0;
end 
// next[ 29 ]
initial
begin
	next[29] = 1'b0;
end 
// next[ 28 ]
initial
begin
	next[28] = 1'b0;
end 
// next[ 27 ]
initial
begin
	next[27] = 1'b0;
end 
// next[ 26 ]
initial
begin
	next[26] = 1'b0;
end 
// next[ 25 ]
initial
begin
	next[25] = 1'b0;
end 
// next[ 24 ]
initial
begin
	next[24] = 1'b0;
end 
// next[ 23 ]
initial
begin
	next[23] = 1'b0;
end 
// next[ 22 ]
initial
begin
	next[22] = 1'b0;
end 
// next[ 21 ]
initial
begin
	next[21] = 1'b0;
end 
// next[ 20 ]
initial
begin
	next[20] = 1'b0;
end 
// next[ 19 ]
initial
begin
	next[19] = 1'b0;
end 
// next[ 18 ]
initial
begin
	next[18] = 1'b0;
end 
// next[ 17 ]
initial
begin
	next[17] = 1'b0;
end 
// next[ 16 ]
initial
begin
	next[16] = 1'b0;
end 
// next[ 15 ]
initial
begin
	next[15] = 1'b0;
end 
// next[ 14 ]
initial
begin
	next[14] = 1'b0;
end 
// next[ 13 ]
initial
begin
	next[13] = 1'b0;
end 
// next[ 12 ]
initial
begin
	next[12] = 1'b0;
end 
// next[ 11 ]
initial
begin
	next[11] = 1'b0;
end 
// next[ 10 ]
initial
begin
	next[10] = 1'b0;
end 
// next[ 9 ]
initial
begin
	next[9] = 1'b0;
end 
// next[ 8 ]
initial
begin
	next[8] = 1'b0;
end 
// next[ 7 ]
initial
begin
	next[7] = 1'b0;
end 
// next[ 6 ]
initial
begin
	next[6] = 1'b0;
end 
// next[ 5 ]
initial
begin
	next[5] = 1'b0;
end 
// next[ 4 ]
initial
begin
	next[4] = 1'b0;
end 
// next[ 3 ]
initial
begin
	next[3] = 1'b0;
end 
// next[ 2 ]
initial
begin
	next[2] = 1'b0;
end 
// next[ 1 ]
initial
begin
	next[1] = 1'b1;
end 
// next[ 0 ]
initial
begin
	next[0] = 1'b1;
end 
// order[ 124 ]
initial
begin
	order[124] = 1'b0;
end 
// order[ 123 ]
initial
begin
	order[123] = 1'b0;
end 
// order[ 122 ]
initial
begin
	order[122] = 1'b0;
end 
// order[ 121 ]
initial
begin
	order[121] = 1'b0;
end 
// order[ 120 ]
initial
begin
	order[120] = 1'b0;
end 
// order[ 119 ]
initial
begin
	order[119] = 1'b0;
end 
// order[ 118 ]
initial
begin
	order[118] = 1'b0;
end 
// order[ 117 ]
initial
begin
	order[117] = 1'b0;
end 
// order[ 116 ]
initial
begin
	order[116] = 1'b0;
end 
// order[ 115 ]
initial
begin
	order[115] = 1'b0;
end 
// order[ 114 ]
initial
begin
	order[114] = 1'b0;
end 
// order[ 113 ]
initial
begin
	order[113] = 1'b0;
end 
// order[ 112 ]
initial
begin
	order[112] = 1'b0;
end 
// order[ 111 ]
initial
begin
	order[111] = 1'b0;
end 
// order[ 110 ]
initial
begin
	order[110] = 1'b0;
end 
// order[ 109 ]
initial
begin
	order[109] = 1'b0;
end 
// order[ 108 ]
initial
begin
	order[108] = 1'b0;
end 
// order[ 107 ]
initial
begin
	order[107] = 1'b0;
end 
// order[ 106 ]
initial
begin
	order[106] = 1'b0;
end 
// order[ 105 ]
initial
begin
	order[105] = 1'b0;
end 
// order[ 104 ]
initial
begin
	order[104] = 1'b0;
end 
// order[ 103 ]
initial
begin
	order[103] = 1'b0;
end 
// order[ 102 ]
initial
begin
	order[102] = 1'b0;
end 
// order[ 101 ]
initial
begin
	order[101] = 1'b0;
end 
// order[ 100 ]
initial
begin
	order[100] = 1'b0;
end 
// order[ 99 ]
initial
begin
	order[99] = 1'b0;
end 
// order[ 98 ]
initial
begin
	order[98] = 1'b0;
end 
// order[ 97 ]
initial
begin
	order[97] = 1'b0;
end 
// order[ 96 ]
initial
begin
	order[96] = 1'b0;
end 
// order[ 95 ]
initial
begin
	order[95] = 1'b0;
end 
// order[ 94 ]
initial
begin
	order[94] = 1'b0;
end 
// order[ 93 ]
initial
begin
	order[93] = 1'b0;
end 
// order[ 92 ]
initial
begin
	order[92] = 1'b0;
end 
// order[ 91 ]
initial
begin
	order[91] = 1'b0;
end 
// order[ 90 ]
initial
begin
	order[90] = 1'b0;
end 
// order[ 89 ]
initial
begin
	order[89] = 1'b0;
end 
// order[ 88 ]
initial
begin
	order[88] = 1'b0;
end 
// order[ 87 ]
initial
begin
	order[87] = 1'b0;
end 
// order[ 86 ]
initial
begin
	order[86] = 1'b0;
end 
// order[ 85 ]
initial
begin
	order[85] = 1'b0;
end 
// order[ 84 ]
initial
begin
	order[84] = 1'b0;
end 
// order[ 83 ]
initial
begin
	order[83] = 1'b0;
end 
// order[ 82 ]
initial
begin
	order[82] = 1'b0;
end 
// order[ 81 ]
initial
begin
	order[81] = 1'b0;
end 
// order[ 80 ]
initial
begin
	order[80] = 1'b0;
end 
// order[ 79 ]
initial
begin
	order[79] = 1'b0;
end 
// order[ 78 ]
initial
begin
	order[78] = 1'b0;
end 
// order[ 77 ]
initial
begin
	order[77] = 1'b0;
end 
// order[ 76 ]
initial
begin
	order[76] = 1'b0;
end 
// order[ 75 ]
initial
begin
	order[75] = 1'b0;
end 
// order[ 74 ]
initial
begin
	order[74] = 1'b0;
end 
// order[ 73 ]
initial
begin
	order[73] = 1'b0;
end 
// order[ 72 ]
initial
begin
	order[72] = 1'b0;
end 
// order[ 71 ]
initial
begin
	order[71] = 1'b0;
end 
// order[ 70 ]
initial
begin
	order[70] = 1'b0;
end 
// order[ 69 ]
initial
begin
	order[69] = 1'b0;
end 
// order[ 68 ]
initial
begin
	order[68] = 1'b0;
end 
// order[ 67 ]
initial
begin
	order[67] = 1'b0;
end 
// order[ 66 ]
initial
begin
	order[66] = 1'b0;
end 
// order[ 65 ]
initial
begin
	order[65] = 1'b0;
end 
// order[ 64 ]
initial
begin
	order[64] = 1'b0;
end 
// order[ 63 ]
initial
begin
	order[63] = 1'b0;
end 
// order[ 62 ]
initial
begin
	order[62] = 1'b0;
end 
// order[ 61 ]
initial
begin
	order[61] = 1'b0;
end 
// order[ 60 ]
initial
begin
	order[60] = 1'b0;
end 
// order[ 59 ]
initial
begin
	order[59] = 1'b0;
end 
// order[ 58 ]
initial
begin
	order[58] = 1'b0;
end 
// order[ 57 ]
initial
begin
	order[57] = 1'b0;
end 
// order[ 56 ]
initial
begin
	order[56] = 1'b0;
end 
// order[ 55 ]
initial
begin
	order[55] = 1'b0;
end 
// order[ 54 ]
initial
begin
	order[54] = 1'b0;
end 
// order[ 53 ]
initial
begin
	order[53] = 1'b0;
end 
// order[ 52 ]
initial
begin
	order[52] = 1'b0;
end 
// order[ 51 ]
initial
begin
	order[51] = 1'b0;
end 
// order[ 50 ]
initial
begin
	order[50] = 1'b0;
end 
// order[ 49 ]
initial
begin
	order[49] = 1'b0;
end 
// order[ 48 ]
initial
begin
	order[48] = 1'b0;
end 
// order[ 47 ]
initial
begin
	order[47] = 1'b0;
end 
// order[ 46 ]
initial
begin
	order[46] = 1'b0;
end 
// order[ 45 ]
initial
begin
	order[45] = 1'b0;
end 
// order[ 44 ]
initial
begin
	order[44] = 1'b0;
end 
// order[ 43 ]
initial
begin
	order[43] = 1'b0;
end 
// order[ 42 ]
initial
begin
	order[42] = 1'b0;
end 
// order[ 41 ]
initial
begin
	order[41] = 1'b0;
end 
// order[ 40 ]
initial
begin
	order[40] = 1'b0;
end 
// order[ 39 ]
initial
begin
	order[39] = 1'b0;
end 
// order[ 38 ]
initial
begin
	order[38] = 1'b0;
end 
// order[ 37 ]
initial
begin
	order[37] = 1'b0;
end 
// order[ 36 ]
initial
begin
	order[36] = 1'b0;
end 
// order[ 35 ]
initial
begin
	order[35] = 1'b0;
end 
// order[ 34 ]
initial
begin
	order[34] = 1'b0;
end 
// order[ 33 ]
initial
begin
	order[33] = 1'b0;
end 
// order[ 32 ]
initial
begin
	order[32] = 1'b0;
end 
// order[ 31 ]
initial
begin
	order[31] = 1'b0;
end 
// order[ 30 ]
initial
begin
	order[30] = 1'b0;
end 
// order[ 29 ]
initial
begin
	order[29] = 1'b0;
end 
// order[ 28 ]
initial
begin
	order[28] = 1'b0;
end 
// order[ 27 ]
initial
begin
	order[27] = 1'b0;
end 
// order[ 26 ]
initial
begin
	order[26] = 1'b0;
end 
// order[ 25 ]
initial
begin
	order[25] = 1'b0;
end 
// order[ 24 ]
initial
begin
	order[24] = 1'b0;
end 
// order[ 23 ]
initial
begin
	order[23] = 1'b0;
end 
// order[ 22 ]
initial
begin
	order[22] = 1'b0;
end 
// order[ 21 ]
initial
begin
	order[21] = 1'b0;
end 
// order[ 20 ]
initial
begin
	order[20] = 1'b0;
end 
// order[ 19 ]
initial
begin
	order[19] = 1'b0;
end 
// order[ 18 ]
initial
begin
	order[18] = 1'b0;
end 
// order[ 17 ]
initial
begin
	order[17] = 1'b0;
end 
// order[ 16 ]
initial
begin
	order[16] = 1'b0;
end 
// order[ 15 ]
initial
begin
	order[15] = 1'b0;
end 
// order[ 14 ]
initial
begin
	order[14] = 1'b0;
end 
// order[ 13 ]
initial
begin
	order[13] = 1'b0;
end 
// order[ 12 ]
initial
begin
	order[12] = 1'b0;
end 
// order[ 11 ]
initial
begin
	order[11] = 1'b0;
end 
// order[ 10 ]
initial
begin
	order[10] = 1'b0;
end 
// order[ 9 ]
initial
begin
	order[9] = 1'b0;
end 
// order[ 8 ]
initial
begin
	order[8] = 1'b0;
end 
// order[ 7 ]
initial
begin
	order[7] = 1'b0;
end 
// order[ 6 ]
initial
begin
	order[6] = 1'b0;
end 
// order[ 5 ]
initial
begin
	order[5] = 1'b0;
end 
// order[ 4 ]
initial
begin
	order[4] = 1'b1;
end 
// order[ 3 ]
initial
begin
	order[3] = 1'b1;
end 
// order[ 2 ]
initial
begin
	order[2] = 1'b0;
end 
// order[ 1 ]
initial
begin
	order[1] = 1'b1;
end 
// order[ 0 ]
initial
begin
	order[0] = 1'b0;
end 
// trace[ 24 ]
initial
begin
	trace[24] = 1'b0;
end 
// trace[ 23 ]
initial
begin
	trace[23] = 1'b0;
end 
// trace[ 22 ]
initial
begin
	trace[22] = 1'b0;
end 
// trace[ 21 ]
initial
begin
	trace[21] = 1'b0;
end 
// trace[ 20 ]
initial
begin
	trace[20] = 1'b0;
end 
// trace[ 19 ]
initial
begin
	trace[19] = 1'b0;
end 
// trace[ 18 ]
initial
begin
	trace[18] = 1'b0;
end 
// trace[ 17 ]
initial
begin
	trace[17] = 1'b0;
end 
// trace[ 16 ]
initial
begin
	trace[16] = 1'b0;
end 
// trace[ 15 ]
initial
begin
	trace[15] = 1'b0;
end 
// trace[ 14 ]
initial
begin
	trace[14] = 1'b0;
end 
// trace[ 13 ]
initial
begin
	trace[13] = 1'b1;
end 
// trace[ 12 ]
initial
begin
	trace[12] = 1'b1;
end 
// trace[ 11 ]
initial
begin
	trace[11] = 1'b1;
end 
// trace[ 10 ]
initial
begin
	trace[10] = 1'b0;
end 
// trace[ 9 ]
initial
begin
	trace[9] = 1'b0;
end 
// trace[ 8 ]
initial
begin
	trace[8] = 1'b0;
end 
// trace[ 7 ]
initial
begin
	trace[7] = 1'b0;
end 
// trace[ 6 ]
initial
begin
	trace[6] = 1'b0;
end 
// trace[ 5 ]
initial
begin
	trace[5] = 1'b0;
end 
// trace[ 4 ]
initial
begin
	trace[4] = 1'b0;
end 
// trace[ 3 ]
initial
begin
	trace[3] = 1'b0;
end 
// trace[ 2 ]
initial
begin
	trace[2] = 1'b0;
end 
// trace[ 1 ]
initial
begin
	trace[1] = 1'b0;
end 
// trace[ 0 ]
initial
begin
	trace[0] = 1'b0;
end 
endmodule

